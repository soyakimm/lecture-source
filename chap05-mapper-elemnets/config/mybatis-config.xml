<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd" >
<configuration>
	
	<!-- 
		configuration 태그 내에는 11개의 설정 태그를 이용할 수 있다.
		<properties>, <settings>, <typeAliases>, <environments>, <mappers>
		<typeHandlers>, <objectFactory>, <plugins>
		<databaseProvider>, <objectWrapperFactory>, <reflectorFactory>
		
		그 중에 자주 사용되는 설정 엘리먼트는 5가지이며 
		<properties>, <settings>, <typeAliases>, <environments>, <mappers> 이다.
	-->
	
	<!-- 1. <properties> 엘리먼트
		 설정 파일에서 공통적인 속성을 정의하거나 외부 파일에서 값을 가져와서 사용해야 하는 경우
		 별도의 properties 파일에 작성한 뒤 설정 파일에서 그 환경 값을 사용할 수 있다.
	 	 외부 프로퍼티 파일은 resource 속성에 클래스패스 하위의 경로를 기술하면 된다.
		
		 클래스패스 경로가 아닌 경우 url  속성에 "file:d:\"로 시작하는 경로를 기술하면 된다.
		 프로퍼티에 설정된 값을 꺼내올 때는 ${ key } 표현식을 사용한다.
	-->
	<properties resource="connection-info.properties"/>
	
	<!-- 2. <settings> 엘리먼트 
		settings 엘리먼트를 사용해서 설정하는 값들은 SqlSessionFactory 객체가 SqlSession 객체를 만들 때 생성할 객체의 특성을 설정한다.
		settings 엘리먼트의 하위 엘리먼트들은 대부분 디폴트값을 가지며, 특별한 경우가 아니면 디폴트값을 사용해도 문제없이 잘 돌아간다.
		
		하위 엘리먼트 (몰라도 된다)
		1. <cacheEnabled> : 캐시를 사용할 것인지에 대한 설정. 기본값 true
		2. <lazyLodingEnabled> : 데이터를 한 번에 가져오는 것이 아닌 관련된 데이터를 필요 시점에 가져와 동작하게 하는 옵션(성능개선), 기본값 true
		3. <aggressiveLazyLoding> : 늦은 로딩을 활성화/비활성화 할 수 있는 옵션, 기본값 true
		4. <multipleResultSetEnabled> : 한 개의 구문에서 여러 개의 결과 셋 허용 여부 옵션, 기본값 true (지원 안되는 드라이버 있음)
		5. <useColumnLabel> : 컬럼 이름 대신 컬럼 라벨을 사용할 것인지에 대한 옵션, 기본값 true (드라이버마다 다름)
		6. <useGeneratedKeys> : 생성키 사용 여부, 기본값 false
		7. <autoMappingBehavior> : 조회 결과 자동 매핑 설정, 기본 설정 PARTIAL (mapper와 동일하지만 전역 설정임)
		8. <defaultExecutorType> : statement를 재사용하지 않는 기본값은 SIMPLE, PreparedStatement 재사용은 REUSE, 일괄처리하는 BATCH가 있다.
		9. <defaultStatementTimeout> : 타임아웃에 대한 전역 설정이다. 초단위 양수 설정을 해야 하며 디폴트는 JDBC 드라이버 자체 설정값이다.
		10. <mapUnderscoreToCamelCase> : DB의 언더바를 이용한 네이밍 규칙과 자바의 낙타봉 표현식을 사용해 자동 매핑할 지에 대한 옵션이며 기본값은 false이다. (너무 자동 좋아하지 마라)
		11. <localCacheScope> : 캐시 저장 범위를 SqlSession으로 할 때 SESSION, 구문별로 캐시할 때는 STATEMENT를 선택할 수 있다. 기본값은 SESSION
	-->
	
	<!-- 3. <typeAliases> 엘리먼트 
		Mapper에서 대부분의 DTO 혹은 VO로 타입을 지정하는 경우 풀클래스 이름을 작성해야 하기 때문에 상당히 길다.
		따라서 오타 발생확률도 높아지고 귀찮기도 하다.
		이러한 불편함을 해결하기 위해 타입별 별칭을 설정할 수 있다.
		
		원시 타입이나 흔하게 사용되는 자바 타입에 대해서는 마이바티스 내부에 미리 정의된 별칭이 있다. (레퍼런스 문서 참조)
	-->
	<typeAliases>
		<typeAlias type="com.greedy.common.MenuDTO" alias="Menu"/>
	</typeAliases>

	<!-- 4. <environments> 엘리먼트 
		마이바티스의 트랜젝션 관리자와 데이터 소스 두 가지를 설정할 수 있다.
		트랜젝션 관리자와 데이터 소스는 마이바티스만 단독으로 사용할 때는 필요하지만, 스프링 연동 모듈을 사용할 경우 필요 없다. (스프링 설정을 따름)
		따라서 마이바티스와 스프링을 연동하면 많은 부분이 설정에서 생략이 된다.
	-->
	<environments default="dev">
		<environment id="dev">
			<!-- 4-1. 트랜젝션 관리자 
				JDBC : 마이바티스 API에서 제공하는 commit, rollback 메소드 등을 사용해서 트랜젝션을 관리하는 방식이다. (수동 commit)
				MANAGED : 마이바티스 API 보다는 컨테이너가 직접 트랜젝션을 관리하는 방식이다. (자동 commit)
			-->
			<transactionManager type="JDBC" />
			
			<!-- 4-2. 데이터소스
				UNPOOLED : 데이터베이스에 요청할 때마다 데이터베이스 연결을 새롭게 생성하고 처리 후 완전히 해제한다. (성능이 저하됨)
				                      따라서 실제 운영 환경에서는 사용하지 않고 간단한 애플리케이션을 테스트할 때를 제외하고는 거의 사용되지 않는다.
				POOLED : 일정 수의 데이터베이스 연결을 풀이라는 메모리 영역에 넣어 두고 필요할 때마다 가져다 사용하고, 사용이 완료되면 다시 풀에 반납한다.
				                 매번 데이터베이스 연결을 새로 생성하지 않기 때문에 대부분의 웹 애플리케이션에서 기본적으로 사용한다.
			 -->
			<dataSource type="POOLED">
				<property name="driver" value="${driver}" />
				<property name="url" value="${url}" />
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
				 
			</dataSource>
		</environment>
	</environments>
	
	<!-- 5. <mappers> 엘리먼트 
		마이바티스에서 가장 중요한 매퍼를 지정하는 엘리먼트이다.
		설정하는 방법은 네 가지가 있지만 한 가지 방식으로 통일하여 관리하는 것이 좋다.
		1. 클래스패스에 위치한 xml 매퍼 파일 지정 (mapper 엘리먼트의 resource 속성)
		2. URL을 사용한 xml 매퍼 파일 지정 (mapper 엘리먼트의 url 속성)
		3. 매퍼 인터페이스를 사용하는 인터페이스 위치 지정 (mapper 엘리먼트의 class 속성)
		4. 패키지 지정으로 패키지 내 자동으로 매퍼 검색(package 엘리먼트의 name 속성)
	-->
	<mappers>
		<package name="com.greedy.section01.xmlmapper"/>
	</mappers>
</configuration>
